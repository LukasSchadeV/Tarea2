#include <iostream>   
#include <queue>      // Implementa las colas.
#include <string>     // Trabaja con cadenas de texto o strings
#include <algorithm>  // Utilizada para realizar operaciones de ordenamiento y de comparación
#include <limits>     // Dentro del codigo se Utilizo para obtener el valor máximo 

using namespace std;

static const int LEFT = 0; // Definir las variables que se utilizaran 
static const int RIGHT = 1;

int main()
{   
    int c;
    cin >> c; // Guarda el número de casos en c

    while (c--) // Bucle c veces osea cada caso
    {
        int n, t, m;
        cin >> n >> t >> m; // Leer los parámetros del caso: n, t, m

        // Usar dos colas para almacenar los autos.
        vector<queue<pair<int, int>>> cars(2); // cars[0] representa el banco izquierdo, cars[1] representa el banco derecho
        vector<int> uploadedTime(m); // Almacenar el tiempo de carga para cada auto

        // Leer el tiempo de llegada y el banco
        for (int i = 0; i < m; ++i)
        {
        int arrivalTime;         // Variable para almacenar el tiempo de llegada del carro.
            string bank;             // guarda el lado del banco correspondiente

            cin >> arrivalTime >> bank;  // Se lee el tiempo de llegada y el lado del banco desde la entrada estándar.

            if (bank == "left")        // Si el lado del banco izquierda:
                cars[LEFT].push(pair<int, int>(i, arrivalTime));  // Se agrega el carro a la cola de la izquierda, índice y tiempo de llegada.
            else                      // De lo contrario, si es el dado decrecho
                cars[RIGHT].push(pair<int, int>(i, arrivalTime)); // Se agrega el carro al lado derecho, índice y tiempo de llegada.
        }

        int time = 0; // Tiempo de partida
        int index = LEFT; // Indicar que el ferry está inicialmente en el banco izquierdo.

        // Recorer con un while los autos hasta que las colas estén vacías.
        while (!(cars[LEFT].empty() && cars[RIGHT].empty()))
        {
            // Buscar el auto que se demoro menos tiempo en llegar.
            int earliest_car = numeric_limits<int>::max();
            if (!cars[LEFT].empty()) // Busca en el lado Izquierdo
                earliest_car = cars[LEFT].front().second;
            if (!cars[RIGHT].empty()) // Busca en el lado derecho
                earliest_car = min(earliest_car, cars[RIGHT].front().second);

            time = max(time, earliest_car); // Actualizar el valor time al resient obtenido, osea el menor tiempo.

            int carCount = 0;
            while (!cars[index].empty() && carCount < n && cars[index].front().second <= time) // Cargar los autos
            {            
                uploadedTime[cars[index].front().first] = time + t; // Establecer el tiempo de carga para el auto.
                cars[index].pop(); // Elimina el carro que ha sido cargado en el ferry.
                ++carCount; // Siguiente
            }

            time += t; // Sumar el tiempo de cruce del ferry.
            index ^= 1; // Cambiar el índice del banco.

        }

        // Imprimir  el resutlado = Tiempo de carga para cada auto
        for (int i = 0; i < m; ++i)
            cout << uploadedTime[i] << endl;

        if (c)
            cout << endl; // Imprimir una línea en blanco si hay más casos a procesar.
    }

    return 0;
}
